pcm.!default {
    type             plug
    slave.pcm       "stereo"
}

# M-Audio Fast Track Pro Device 0,1 und 0,2 as one 4 Channel Device
pcm.ftp4ch {
    type multi;
    slaves.a.pcm "hw:0,0";
    slaves.a.channels 2;
    slaves.b.pcm "hw:0,1";
    slaves.b.channels 2;

    bindings.0.slave a;
    bindings.0.channel 0;
    bindings.1.slave a;
    bindings.1.channel 1;
    bindings.2.slave b;
    bindings.2.channel 0;
    bindings.3.slave b;
    bindings.3.channel 1;
}

# Native Instruments Audio 8 DJ
pcm.na8dj {
	type multi
	slaves.a { pcm "hw:Audio8DJ,0,0"; channels 2 }
	slaves.b { pcm "hw:Audio8DJ,0,1"; channels 2 }
	slaves.c { pcm "hw:Audio8DJ,0,2"; channels 2 }
	slaves.d { pcm "hw:Audio8DJ,0,3"; channels 2 }

	bindings.0 { slave a; channel 0 }
	bindings.1 { slave a; channel 1 }
	bindings.2 { slave b; channel 0 }
	bindings.3 { slave b; channel 1 }
	bindings.4 { slave c; channel 0 }
	bindings.5 { slave c; channel 1 }
	bindings.6 { slave d; channel 0 }
	bindings.7 { slave d; channel 1 }
}

# A dummy control device to keep JACK happy

ctl.na8dj {
	type hw
	card 0
}







# First soundcard with no conversions
pcm.stereo {
    type hw
    card 0
#    channels 2
#    mmap_emulation true
}

# First soundcard with ms-coding
pcm.mscoded {
    type plug
    slave.pcm "ladspa";
}

# The actual slave for the above
pcm.ladspa {
    type ladspa
    slave.pcm "plughw:0,0";
    path "/usr/lib/ladspa";
    plugins [{
	label matrixStMS
        input {
            controls [  ]
        }
    }]
}

# A software volume control with conversions, if needed, for our first soundcard
pcm.softvolstereo {
	type		softvol
	slave.pcm	"plughw:0,0"
	control.name	"Softmaster_stereo"
	control.card	0
}

# A software volume control with ms-coding and conversions, if needed, for our first soundcard
pcm.softvolmscoded {
	type		softvol
	slave.pcm	"mscoded"
	control.name	"Softmaster_mscoded"
	control.card	0
}

#pcm.bluetooth {
#	type bluetooth
#	device "5C:2E:59:F6:FE:F8"
#	profile "auto"
#}

# Our bridge to jack, enables any player with alsa-output to be a jack-client
pcm.jackplug  {
        type plug
        slave { pcm "jackbridge" }
        }
# The actual slave for the above
pcm.jackbridge   {
        type jack
	playback_ports  {
                0 brutefir:input-0
                1 brutefir:input-1
                }

        capture_ports   {
                rate 96000
		0 system:capture_1
                1 system:capture_2
                }
        }

# Fixed format-conversion for the UMIK-1
pcm.minimic {
	type lfloat             # Linear<->Float conversion PCM
	slave { pcm "minimic_hw" format "S24_3LE" } # MiniDSP Mic
}

# UMIK-1 slave definition
pcm.minimic_hw {
	type hw
	card 1
	device 0 # MiniDSP Mic
#	device 1 # Fasttrack Pro
}


##### BELOW HERE: MISC, OLD, TESTING, EXAMPLES, BUT ACTIVE!

# ------------------------------------------------------
# hardware 0,0 : used for ALSA playback
pcm.loophw00 {
  type hw
  card Loopback
  device 0
  subdevice 0
  format S32_LE
  rate 96000
}

# ------------------------------------------------------
# playback PCM device: using loopback subdevice 0,0
# Don't use a buffer size that is too small. Some apps 
# won't like it and it will sound crappy 

pcm.amix {
  type dmix
  ipc_key 219345
  slave {
    pcm loophw00
    period_size 4096
    periods 2
  }
}

# ------------------------------------------------------
# software volume
pcm.asoftvol {
  type softvol
  slave.pcm "amix"

  control { name PCM }

  min_dB -51.0
  max_dB   0.0
}

# ------------------------------------------------------
# for jack alsa_in: looped-back signal at other ends
pcm.cloop {
  type hw
  card Loopback
  device 1
  subdevice 0
  format S32_LE
  rate 96000
}

# ======================================================
# ------------------------------------------------------
# hardware 0,1 : used for ALSA capture
pcm.loophw01 {
  type hw
  card Loopback
  device 0
  subdevice 1
  format S32_LE
  rate 96000
}

# ------------------------------------------------------
# for jack alsa_out: looped-back signal at other end
pcm.ploop {
  type hw
  card Loopback
  device 1
  subdevice 1
  format S32_LE
  rate 96000
}

# ======================================================
# ------------------------------------------------------
# duplex device combining our PCM devices defined above
pcm.aduplex {
  type asym
  playback.pcm "asoftvol"
  capture.pcm "loophw01"
}

# ------------------------------------------------------
